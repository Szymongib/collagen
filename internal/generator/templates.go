package generator

// Templates are stored in the .go file to prevent issues with dep (no-go files)

// TODO: allow to customize Package name and use source Type package name if needed
// TODO: let user decide not to generate plural type

const generatedCodeTemplate = `// Code generated by collagen. DO NOT EDIT
package {{ .Package }}

type {{ .PluralType }} []{{ .Type }}

func (collection {{ .PluralType }}) ToSlice() []{{ .Type }} {
	return []{{ .Type }}(collection)
}
{{ range $key, $value := .RequestedFunctions }}
{{index $.GeneratedFunctions $value }}
{{ end }}`

const containsFuncTemplate = `// Contains determines if the slice contains the provided element
func (collection {{ .PluralType }}) Contains(element {{ .Type }}) bool {
	for _, e := range collection {
		if e == element {
			return true
		}
	}
	return false
}`

// TODO - drop all in n > length
const dropFuncTemplate = `// Drop returns a slice without first n elements
func (collection {{ .PluralType }}) Drop(n int) {{ .PluralType }} {
	length := len(collection)

	if n > length {
		return {{ .PluralType }}{}
	}
	return collection[:length-n]
}`

const existFuncTemplate = `// Exist returns if the collection contains the element that satisfy passed function
func (collection {{ .PluralType }}) Exist(f func(element {{ .Type }}) bool) bool {
	for _, e := range collection {
		if f(e) {
			return true
		}
	}
	return false
}`

const filterFuncTemplate = `// Filter returns collection of elements that satisfied the check
func (collection {{ .PluralType }}) Filter(f func(item {{ .Type }}) bool) {{ .PluralType }} {
	filtered := {{ .PluralType }}{}
	for _, e := range collection {
		if f(e) {
			filtered = append(filtered, e)
		}
	}
	return filtered
}`

const mapFuncTemplate = `// Map maps all collection elements with use of provided function
func (collection {{ .PluralType }}) Map(f func(item {{ .Type }}) interface{}) []interface{} {
	result := make([]interface{}, len(collection))
	for i, e := range collection {
		result[i] = f(e)
	}
	return result
}`

const takeFuncTemplate = `// Take returns first n elements of the slice
func (collection {{ .PluralType }}) Take(n int) {{ .PluralType }} {
	if n > len(collection) {
		return collection
	}
	return collection[:n]
}`
